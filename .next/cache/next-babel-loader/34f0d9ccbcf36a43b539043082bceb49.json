{"ast":null,"code":"const googleKey = 'AIzaSyBPWFwHrsgzYw36bl-ecghaFEqNuRuGDUg';\nconst googleURL = `https://maps.googleapis.com/maps/api/place/nearbysearch/json?`; //Create params sending the object to the generator URLSearchParams \n\nexport const getAttractions = async params => {\n  //adding key property to the request in order not to expose to users\n  params['key'] = googleKey;\n  const parsedParams = new URLSearchParams(params).toString(); // Call an external API endpoint to get attractions and extract the 'results' section.\n\n  const res = await fetch(googleURL + parsedParams);\n  let data = await res.json();\n  const attractions = data['results']; //adding imgURL field with the picture specific reference or 'not found' photo in case there's not picture\n\n  attractions.forEach(attr => {\n    const googlePhotoURL = `https://maps.googleapis.com/maps/api/place/photo?maxwidth=400&key=${googleKey}&photoreference=${attr.reference}`;\n    const notFoundPhoto = 'https://www.publicdomainpictures.net/pictures/280000/velka/not-found-image-15383864787lu.jpg';\n    attr['imgURL'] = !attr.photos || !attr.photos[0] ? notFoundPhoto : googlePhotoURL;\n  });\n  return attractions;\n};","map":{"version":3,"sources":["C:/Users/gilad/Desktop/Bridgify/BridgifyAsg/services/webapi.ts"],"names":["googleKey","googleURL","getAttractions","params","parsedParams","URLSearchParams","toString","res","fetch","data","json","attractions","forEach","attr","googlePhotoURL","reference","notFoundPhoto","photos"],"mappings":"AAEA,MAAMA,SAAS,GAAG,yCAAlB;AACA,MAAMC,SAAS,GAAI,+DAAnB,C,CAEA;;AACA,OAAO,MAAMC,cAAc,GAAG,MAAOC,MAAP,IAAkB;AAC9C;AACAA,EAAAA,MAAM,CAAC,KAAD,CAAN,GAAgBH,SAAhB;AACA,QAAMI,YAAoB,GAAG,IAAIC,eAAJ,CAAoBF,MAApB,EAA4BG,QAA5B,EAA7B,CAH8C,CAK9C;;AACA,QAAMC,GAAG,GAAG,MAAMC,KAAK,CAACP,SAAS,GAAGG,YAAb,CAAvB;AACA,MAAIK,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAjB;AACA,QAAMC,WAAyB,GAAGF,IAAI,CAAC,SAAD,CAAtC,CAR8C,CAU9C;;AACAE,EAAAA,WAAW,CAACC,OAAZ,CAAqBC,IAAD,IAAU;AAC5B,UAAMC,cAAsB,GAAI,qEAAoEd,SAAU,mBAAkBa,IAAI,CAACE,SAAU,EAA/I;AACA,UAAMC,aAAqB,GAAG,8FAA9B;AACAH,IAAAA,IAAI,CAAC,QAAD,CAAJ,GAAiB,CAACA,IAAI,CAACI,MAAN,IAAgB,CAACJ,IAAI,CAACI,MAAL,CAAY,CAAZ,CAAjB,GAAkCD,aAAlC,GAAkDF,cAAnE;AACD,GAJD;AAMA,SAAOH,WAAP;AACD,CAlBM","sourcesContent":["import { Attraction } from \"../interfaces\"\r\n\r\nconst googleKey = 'AIzaSyBPWFwHrsgzYw36bl-ecghaFEqNuRuGDUg'\r\nconst googleURL = `https://maps.googleapis.com/maps/api/place/nearbysearch/json?`\r\n\r\n//Create params sending the object to the generator URLSearchParams \r\nexport const getAttractions = async (params) => {\r\n  //adding key property to the request in order not to expose to users\r\n  params['key'] = googleKey\r\n  const parsedParams: string = new URLSearchParams(params).toString()\r\n\r\n  // Call an external API endpoint to get attractions and extract the 'results' section.\r\n  const res = await fetch(googleURL + parsedParams)\r\n  let data = await res.json()\r\n  const attractions: Attraction[] = data['results']\r\n\r\n  //adding imgURL field with the picture specific reference or 'not found' photo in case there's not picture\r\n  attractions.forEach((attr) => {\r\n    const googlePhotoURL: string = `https://maps.googleapis.com/maps/api/place/photo?maxwidth=400&key=${googleKey}&photoreference=${attr.reference}`\r\n    const notFoundPhoto: string = 'https://www.publicdomainpictures.net/pictures/280000/velka/not-found-image-15383864787lu.jpg'\r\n    attr['imgURL'] = !attr.photos || !attr.photos[0] ? notFoundPhoto : googlePhotoURL\r\n  })\r\n\r\n  return attractions\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}