{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gilad\\\\Desktop\\\\Bridgify\\\\BridgifyAsg\\\\pages\\\\index.tsx\";\nvar __jsx = React.createElement;\n//----->react & next\nimport React from 'react';\nimport Head from \"next/head\"; //----->in-app components & styles\n\nimport AttractionCard from '../components/AttractionCard'; // import styles from './index.module.css'can\n\nconst hotelsDesignDic = {\n  ['default']: {\n    titleSize: '1em',\n    titleColor: 'black'\n  },\n  ['hilton']: {\n    titleSize: '1em',\n    titleColor: 'pink'\n  },\n  ['royal']: {\n    titleSize: '0.8em',\n    titleColor: 'green'\n  }\n};\nconst googleKey = 'AIzaSyBPWFwHrsgzYw36bl-ecghaFEqNuRuGDUg';\nconst googleURL = `https://maps.googleapis.com/maps/api/place/nearbysearch/json?`;\nconst paramsAsObject = {\n  location: '51.5136855,-0.1178635',\n  radius: '1500',\n  type: 'bars',\n  key: googleKey\n}; //create params string from the req object\n\nconst paramsAsString = Object.entries(paramsAsObject).map(([key, val]) => `${key}=${val}`).join('&'); //TODO ---->> new URLSearchParams({ hello: \"world\", hi: \"gilad\" }).toString()'hello=world&hi=gilad'\n// This function gets called at build time on server-side.\n\nexport const getServerSideProps = async () => {\n  // Call an external API endpoint to get posts.\n  const res = await fetch(googleURL + paramsAsString);\n  let data = await res.json();\n  const resultsData = data['results']; // console.log(resultsData);\n  // 'Home' component will receive resultsData as a prop by returning it\n\n  return {\n    props: {\n      resultsData\n    }\n  };\n};\n\nconst Home = ({\n  resultsData,\n  hotel\n}) => {\n  // let resultsData =  require('../data/resultsFromAPI.json')['results']\n  // console.log(resultsData);\n  const chosenHotel = hotel ? hotel : 'default';\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    style: {\n      textAlign: 'center',\n      padding: '2em',\n      fontFamily: 'Monospace'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 3\n    }\n  }, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 4\n    }\n  }, __jsx(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }\n  }, \"Bridgify\")), __jsx(\"h1\", {\n    style: {\n      color: 'purple',\n      paddingBottom: '0.5em',\n      fontSize: '3em'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 4\n    }\n  }, \"Bridgify!\"), __jsx(\"div\", {\n    style: {\n      placeContent: 'center',\n      display: 'flex',\n      flexWrap: 'wrap'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 4\n    }\n  }, resultsData.map((attr, index) => {\n    return __jsx(AttractionCard, {\n      key: attr.place_id,\n      name: attr.name,\n      number_of_reviews: attr.user_ratings_total,\n      rating: attr.rating,\n      tags: attr.types,\n      imgUrl: attr.photos ? attr.photos[0] ? attr.photos[0].photo_reference : null : null,\n      titleSize: hotelsDesignDic[chosenHotel].titleSize,\n      titleColor: hotelsDesignDic[chosenHotel].titleColor,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }\n    });\n  }))));\n};\n\nexport default Home;","map":{"version":3,"sources":["C:/Users/gilad/Desktop/Bridgify/BridgifyAsg/pages/index.tsx"],"names":["React","Head","AttractionCard","hotelsDesignDic","titleSize","titleColor","googleKey","googleURL","paramsAsObject","location","radius","type","key","paramsAsString","Object","entries","map","val","join","getServerSideProps","res","fetch","data","json","resultsData","props","Home","hotel","chosenHotel","textAlign","padding","fontFamily","color","paddingBottom","fontSize","placeContent","display","flexWrap","attr","index","place_id","name","user_ratings_total","rating","types","photos","photo_reference"],"mappings":"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","sourcesContent":["//----->react & next\r\nimport React from 'react';\r\n\r\nimport Head from \"next/head\";\r\n\r\n\r\n//----->in-app components & styles\r\nimport AttractionCard from '../components/AttractionCard'\r\n// import styles from './index.module.css'can\r\nimport { Attraction } from '../interfaces/'\r\nimport { GetServerSideProps, GetStaticProps } from 'next';\r\n\r\ntype designProps = {\r\n\ttitleSize: string,\r\n\ttitleColor: string\r\n}\r\n\r\nconst hotelsDesignDic: { [key: string]: designProps } = {\r\n\t['default']: {\r\n\t\ttitleSize: '1em',\r\n\t\ttitleColor: 'black'\r\n\t},\r\n\t['hilton']: {\r\n\t\ttitleSize: '1em',\r\n\t\ttitleColor: 'pink'\r\n\t},\r\n\t['royal']: {\r\n\t\ttitleSize: '0.8em',\r\n\t\ttitleColor: 'green'\r\n\t}\r\n};\r\n\r\ntype Props = {\r\n\thotel?: string\r\n\tresultsData?: any\r\n}\r\n\r\nconst googleKey = 'AIzaSyBPWFwHrsgzYw36bl-ecghaFEqNuRuGDUg'\r\nconst googleURL = `https://maps.googleapis.com/maps/api/place/nearbysearch/json?`\r\n\r\nconst paramsAsObject = {\r\n\tlocation: '51.5136855,-0.1178635',\r\n\tradius: '1500',\r\n\ttype: 'bars',\r\n\tkey: googleKey\r\n}\r\n//create params string from the req object\r\nconst paramsAsString = Object.entries(paramsAsObject).map(([key, val]) => `${key}=${val}`).join('&')\r\n//TODO ---->> new URLSearchParams({ hello: \"world\", hi: \"gilad\" }).toString()'hello=world&hi=gilad'\r\n\r\n\r\n// This function gets called at build time on server-side.\r\nexport const getServerSideProps: GetServerSideProps = async () => {\r\n\t// Call an external API endpoint to get posts.\r\n\tconst res = await fetch(googleURL + paramsAsString)\r\n\tlet data = await res.json()\r\n\tconst resultsData: Attraction[] = data['results']\r\n\t// console.log(resultsData);\r\n\r\n\t// 'Home' component will receive resultsData as a prop by returning it\r\n\treturn {\r\n\t\tprops: {\r\n\t\t\tresultsData\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\nconst Home = ({ resultsData, hotel }: Props) => {\r\n\t// let resultsData =  require('../data/resultsFromAPI.json')['results']\r\n\t// console.log(resultsData);\r\n\r\n\tconst chosenHotel = hotel ? hotel : 'default'\r\n\treturn <>\r\n\t\t<div style={{ textAlign: 'center', padding: '2em', fontFamily: 'Monospace' }}>\r\n\t\t\t<Head>\r\n\t\t\t\t<title>Bridgify</title>\r\n\t\t\t</Head>\r\n\t\t\t<h1 style={{ color: 'purple', paddingBottom: '0.5em', fontSize: '3em' }}>Bridgify!</h1>\r\n\t\t\t<div style={{ placeContent: 'center', display: 'flex', flexWrap: 'wrap' }}>\r\n\t\t\t\t{resultsData.map((attr, index) => {\r\n\t\t\t\t\treturn <AttractionCard\r\n\t\t\t\t\t\tkey={attr.place_id}\r\n\t\t\t\t\t\tname={attr.name}\r\n\t\t\t\t\t\tnumber_of_reviews={attr.user_ratings_total}\r\n\t\t\t\t\t\trating={attr.rating}\r\n\t\t\t\t\t\ttags={attr.types}\r\n\t\t\t\t\t\timgUrl={attr.photos ? attr.photos[0] ? attr.photos[0].photo_reference : null : null}\r\n\t\t\t\t\t\ttitleSize={hotelsDesignDic[chosenHotel].titleSize}\r\n\t\t\t\t\t\ttitleColor={hotelsDesignDic[chosenHotel].titleColor}\r\n\t\t\t\t\t></AttractionCard>\r\n\t\t\t\t})}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</>\r\n}\r\n\r\nexport default Home"]},"metadata":{},"sourceType":"module"}